{
  "name": "validr",
  "version": "0.1.2",
  "description": "Validations without ties to any framework. Inspired by validator, express-validator and validictorian.",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/samora/validr"
  },
  "keywords": [
    "validation",
    "validator",
    "validate",
    "express",
    "koa",
    "sails"
  ],
  "author": {
    "name": "Samora Dake"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/samora/validr/issues"
  },
  "homepage": "https://github.com/samora/validr",
  "dependencies": {
    "lodash": "~2.4.1",
    "validator": "~3.12.0"
  },
  "devDependencies": {
    "should": "~3.3.1"
  },
  "readme": "# Validr\r\n\r\n[![Build Status](https://travis-ci.org/samora/validr.svg)](https://travis-ci.org/samora/validr)\r\n\r\nFramework agnostic [Node.js](http://nodejs.org) validations.\r\nInspired by [validator](https://github.com/chriso/validator.js), [express-validator](https://github.com/ctavan/express-validator) and [validictorian](https://github.com/samora/validictorian).\r\n\r\nThanks to [@mocheng](https://github.com/mocheng), Validr now supports extending with custom validators, just like [validator](https://github.com/chriso/validator.js#extensions).\r\n\r\n## Installation\r\n\r\n```\r\nnpm install validr\r\n```\r\n\r\n## Usage\r\n\r\nIf you have ever used [express-validator](https://github.com/ctavan/express-validator) you should feel right at home.\r\n\r\nHere is an example using [Express](expressjs.com). Can be used similarly in any other framework.\r\n```javascript\r\nvar express = require('express'),\r\n  Validr = require('validr'),\r\n  trimBody = require('trim-body');\r\n\r\napp = express();\r\n\r\napp.use(express.bodyParser());\r\napp.use(app.router);\r\n\r\napp.post('/user', function (req, res){\r\n  trimBody(req.body);\r\n\r\n  // Expected 'req.body' object format\r\n  // {\r\n  //   name: {\r\n  //     first: <first name>,\r\n  //     last: <last name>\r\n  //   },\r\n  //   email: <email>,\r\n  //   age: <age>,\r\n  //   sex: <sex>,\r\n  //   occupation: <occupation>\r\n  // }\r\n\r\n\r\n  // 1. Create an instance of Validr.\r\n\r\n  var validr = new Validr(req.body);\r\n\r\n\r\n  // 2. Validations\r\n\r\n  validr\r\n    // use string with dot-notation to validate nested fields\r\n    .validate('name.first', 'First Name is required.')\r\n    .isLength(1);\r\n\r\n  validr\r\n    // you can also use an array to validate nested fields\r\n    .validate(['name', 'last'], 'Last Name is required.')\r\n    .isLength(1);\r\n\r\n  validr\r\n    // an object can be used to set separate validation messages for validators.\r\n    .validate('email', {\r\n      isLength: 'Email is required.',\r\n      isEmail: 'Email must be valid.'\r\n    })\r\n    // validators are chainable\r\n    .isLength(1).isEmail(); \r\n\r\n  validr\r\n    .validate('age', 'Age must be a number.')\r\n    .isNumeric();\r\n\r\n  validr\r\n    .validate('sex', 'Sex must be M (male) or F (female).')\r\n    .isIn(['M', 'F']).isLength(1);\r\n\r\n\r\n  // 3. Check for errors.\r\n\r\n  var errors = validr.validationErrors();\r\n\r\n  if (errors) return res.json(errors);\r\n\r\n\r\n\r\n  // ...\r\n  // Process req.body however you want. Example: save to db.\r\n});\r\n\r\n\r\napp.listen(3000);\r\n```\r\n\r\n### Validate\r\n\r\nValidating fields is similar to [express-validator](https://github.com/ctavan/express-validator)'s `assert`.\r\n\r\nDifferences between `validate` and `assert`.\r\n* No `notEmpty` and `len` methods. Use `isLength`.\r\n* Nested fields are targeted with a dot-notation string or array. Example: `'name.first'` or `['name', 'first']`.\r\n\r\n\r\n### Validation errors\r\n\r\nYou can get errors in two ways. Similar to [express-validator](https://github.com/ctavan/express-validator#validation-errors).\r\n\r\n```javascript\r\nvar errors = validr.validationErrors();\r\nvar mappedErrors = validr.validationErrors(true);\r\n```\r\n\r\nerrors:\r\n```json\r\n[\r\n  {param: \"email\", msg: \"Email is required.\", value: \"<received input>\"},\r\n  {param: \"email\", msg: \"Email must be valid.\", value: \"<received input>\"},\r\n  {param: \"age\", msg: \"Age must be a number.\", value: \"<received input>\"}\r\n]\r\n```\r\n\r\nmappedErrors:\r\n```json\r\n{\r\n  email: {\r\n    param: \"email\",\r\n    msg: \"Email must be valid.\",\r\n    value: \"<received input>\"\r\n  },\r\n  age: {\r\n    param: \"age\",\r\n    msg: \"Age is required.\",\r\n    value: \"<received input>\"\r\n  }\r\n}\r\n```\r\n\r\n### Extending with custom validators\r\n\r\nAdd custom validator functions to an object which is the second parameter when instantiating Validr. Ensure validator's name begins with an _is_.\r\n\r\n```javascript\r\nvar validr = new Validr(body, {\r\n  isNotExampleEmail: function(str) {\r\n    return !/@example.com/.test(str);\r\n  }\r\n});\r\n\r\nvalidr.validate('email', {\r\n  isLength: 'Email is required.',\r\n  isEmail: 'Email must be valid',\r\n  isNotExampleEmail: 'Email must NOT be @example.com.'\r\n  }).isLength(1).isEmail().isNotExampleEmail();\r\n```\r\n\r\n## Tests\r\n\r\n```\r\nnpm install -g mocha\r\n```\r\n\r\nThen,\r\n```\r\nnpm test\r\n```\r\n\r\n## License\r\nMIT",
  "readmeFilename": "README.md",
  "gitHead": "d6ce26b0aeddfd659495a6aab2aedd05dc45c1b8",
  "_id": "validr@0.1.2",
  "_shasum": "4693c3054b863f153bacb756f9d7123d996d137b",
  "_from": "validr@^0.1.2"
}
